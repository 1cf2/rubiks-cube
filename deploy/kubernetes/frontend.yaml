apiVersion: apps/v1
kind: Deployment
metadata:
  name: rubiks-frontend
  labels:
    app: rubiks-frontend
    component: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rubiks-frontend
  template:
    metadata:
      labels:
        app: rubiks-frontend
        component: frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/REPO_NAME/rubiks-cube-frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
        - name: NODE_ENV
          value: "production"
      imagePullSecrets:
      - name: ghcr-secret

---
apiVersion: v1
kind: Service
metadata:
  name: rubiks-frontend-service
  labels:
    app: rubiks-frontend
spec:
  selector:
    app: rubiks-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rubiks-frontend-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/add-base-url: "true"
spec:
  tls:
  - hosts:
    - rubikscube.app
    secretName: rubiks-frontend-tls
  rules:
  - host: rubikscube.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rubiks-frontend-service
            port:
              number: 80